- name: Provisionner l'instance EC2
  hosts: all
  become: true

  vars:
    env: "{{ env | default('prod') }}"
    project_dir: /home/ubuntu/saas-platform
    docker_image_name: react-frontend
    container_name: "{{ 'react-frontend-container-test' if env == 'test' else 'react-frontend-container' }}"
    compose_file: "{{ 'docker-compose.test.yml' if env == 'test' else 'docker-compose.yml' }}"

  tasks:
    - name: Cloner le projet depuis GitHub
      git:
        repo: "https://github.com/Scarnee/saas-platform.git"
        dest: "{{ project_dir }}"
        version: main
        force: yes

    - name: Arrêter les processus apt en cours
      shell: |
        killall -q apt apt-get || true
      ignore_errors: true

    - name: Mettre à jour le cache apt
      apt:
        update_cache: yes

    - name: Installer les paquets de base nécessaires
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - git
        state: present

    - name: Ajouter la clé GPG officielle de Docker
      shell: |
        mkdir -p /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Ajouter le dépôt Docker
      shell: |
        echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
        https://download.docker.com/linux/ubuntu \
        $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
      args:
        creates: /etc/apt/sources.list.d/docker.list

    - name: Mettre à jour le cache apt après ajout du dépôt Docker
      apt:
        update_cache: yes

    - name: Installer Docker et le plugin Docker Compose
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present

    - name: Activer et démarrer le service docker
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Ajouter l'utilisateur ubuntu au groupe docker
      user:
        name: ubuntu
        groups: docker
        append: yes

    - name: Arrêter le conteneur existant (si en cours d'exécution)
      shell: docker stop {{ container_name }}
      register: stop_result
      failed_when: false

    - name: Supprimer le conteneur existant (si présent)
      shell: docker rm {{ container_name }}
      register: rm_result
      failed_when: false

    - name: Arrêter la stack frontend + reverse proxy
      shell: docker compose -f {{ compose_file }} down
      args:
        chdir: "{{ project_dir }}"
      ignore_errors: true

    - name: Démarrer la stack frontend + reverse proxy
      shell: docker compose -f {{ compose_file }} up -d --build
      args:
        chdir: "{{ project_dir }}"
