- name: Provision EC2 Instance
  hosts: all
  become: true

  vars:
    project_dir: /home/ubuntu/saas-platform
    docker_image_name: react-frontend
    container_name: react-frontend-container

  tasks:
    - name: Cloner le projet depuis GitHub
      git:
        repo: "https://github.com/Scarnee/saas-platform.git"
        dest: "{{ project_dir }}"
        version: main
        force: yes

    - name: Stop any running apt processes
      shell: |
        killall -q apt apt-get || true
      ignore_errors: true

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install required base packages
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - git
        state: present

    - name: Add Docker's official GPG key
      shell: |
        mkdir -p /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Add Docker repository
      shell: |
        echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
        https://download.docker.com/linux/ubuntu \
        $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
      args:
        creates: /etc/apt/sources.list.d/docker.list

    - name: Update apt cache after adding Docker repo
      apt:
        update_cache: yes

    - name: Install Docker and Docker Compose plugin
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present

    - name: Enable and start docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes

    - name: Stop existing container (if running)
      shell: docker stop {{ container_name }}
      ignore_errors: true

    - name: Remove existing container (if exists)
      shell: docker rm {{ container_name }}
      ignore_errors: true

    - name: Arrêter la stack frontend + reverse proxy (docker-compose down)
      shell: docker compose down
      args:
        chdir: "{{ project_dir }}"
      ignore_errors: true

    - name: Démarrer la stack frontend + reverse proxy
      shell: docker compose up -d --build
      args:
        chdir: "{{ project_dir }}"

    - name: Arrêter la stack monitoring (docker-compose down)
      shell: docker compose down
      args:
        chdir: "{{ project_dir }}/monitoring"
      ignore_errors: true

    - name: Démarrer la stack monitoring (docker-compose up -d)
      shell: docker compose up -d
      args:
        chdir: "{{ project_dir }}/monitoring"
